
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "_source\auto_galleries\data\plot_6_advanced_prediction.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download__source_auto_galleries_data_plot_6_advanced_prediction.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr__source_auto_galleries_data_plot_6_advanced_prediction.py:


==============================================
Advance Usage: Data with Model Predictions
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 9-10

Import modeva modules

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: Python

    import numpy as np
    import pandas as pd
    from modeva import DataSet
    from modeva import TestSuite
    from modeva.models import MoXGBRegressor
    from modeva.models import MoScoredRegressor








.. GENERATED FROM PYTHON SOURCE LINES 18-19

Load a simulated Friedman data

.. GENERATED FROM PYTHON SOURCE LINES 19-28

.. code-block:: Python

    from sklearn.datasets import make_friedman1
    x, y = make_friedman1(n_samples=10000, n_features=10, noise=0.1, random_state=2024)
    columns = ['X' + str(i) for i in range(10)] + ['Y']
    df = pd.DataFrame(np.concatenate([x, y.reshape(-1, 1)], 1), columns=columns)

    ds = DataSet()
    ds.load_dataframe(data=df)
    ds.set_random_split()








.. GENERATED FROM PYTHON SOURCE LINES 29-30

Fit a XGB model

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: Python

    model = MoXGBRegressor(max_depth=2)
    model.fit(ds.train_x, ds.train_y)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <style>#sk-container-id-1 {
      /* Definition of color scheme common for light and dark mode */
      --sklearn-color-text: black;
      --sklearn-color-line: gray;
      /* Definition of color scheme for unfitted estimators */
      --sklearn-color-unfitted-level-0: #fff5e6;
      --sklearn-color-unfitted-level-1: #f6e4d2;
      --sklearn-color-unfitted-level-2: #ffe0b3;
      --sklearn-color-unfitted-level-3: chocolate;
      /* Definition of color scheme for fitted estimators */
      --sklearn-color-fitted-level-0: #f0f8ff;
      --sklearn-color-fitted-level-1: #d4ebff;
      --sklearn-color-fitted-level-2: #b3dbfd;
      --sklearn-color-fitted-level-3: cornflowerblue;

      /* Specific color for light theme */
      --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));
      --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));
      --sklearn-color-icon: #696969;

      @media (prefers-color-scheme: dark) {
        /* Redefinition of color scheme for dark theme */
        --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));
        --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));
        --sklearn-color-icon: #878787;
      }
    }

    #sk-container-id-1 {
      color: var(--sklearn-color-text);
    }

    #sk-container-id-1 pre {
      padding: 0;
    }

    #sk-container-id-1 input.sk-hidden--visually {
      border: 0;
      clip: rect(1px 1px 1px 1px);
      clip: rect(1px, 1px, 1px, 1px);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }

    #sk-container-id-1 div.sk-dashed-wrapped {
      border: 1px dashed var(--sklearn-color-line);
      margin: 0 0.4em 0.5em 0.4em;
      box-sizing: border-box;
      padding-bottom: 0.4em;
      background-color: var(--sklearn-color-background);
    }

    #sk-container-id-1 div.sk-container {
      /* jupyter's `normalize.less` sets `[hidden] { display: none; }`
         but bootstrap.min.css set `[hidden] { display: none !important; }`
         so we also need the `!important` here to be able to override the
         default hidden behavior on the sphinx rendered scikit-learn.org.
         See: https://github.com/scikit-learn/scikit-learn/issues/21755 */
      display: inline-block !important;
      position: relative;
    }

    #sk-container-id-1 div.sk-text-repr-fallback {
      display: none;
    }

    div.sk-parallel-item,
    div.sk-serial,
    div.sk-item {
      /* draw centered vertical line to link estimators */
      background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));
      background-size: 2px 100%;
      background-repeat: no-repeat;
      background-position: center center;
    }

    /* Parallel-specific style estimator block */

    #sk-container-id-1 div.sk-parallel-item::after {
      content: "";
      width: 100%;
      border-bottom: 2px solid var(--sklearn-color-text-on-default-background);
      flex-grow: 1;
    }

    #sk-container-id-1 div.sk-parallel {
      display: flex;
      align-items: stretch;
      justify-content: center;
      background-color: var(--sklearn-color-background);
      position: relative;
    }

    #sk-container-id-1 div.sk-parallel-item {
      display: flex;
      flex-direction: column;
    }

    #sk-container-id-1 div.sk-parallel-item:first-child::after {
      align-self: flex-end;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:last-child::after {
      align-self: flex-start;
      width: 50%;
    }

    #sk-container-id-1 div.sk-parallel-item:only-child::after {
      width: 0;
    }

    /* Serial-specific style estimator block */

    #sk-container-id-1 div.sk-serial {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: var(--sklearn-color-background);
      padding-right: 1em;
      padding-left: 1em;
    }


    /* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is
    clickable and can be expanded/collapsed.
    - Pipeline and ColumnTransformer use this feature and define the default style
    - Estimators will overwrite some part of the style using the `sk-estimator` class
    */

    /* Pipeline and ColumnTransformer style (default) */

    #sk-container-id-1 div.sk-toggleable {
      /* Default theme specific background. It is overwritten whether we have a
      specific estimator or a Pipeline/ColumnTransformer */
      background-color: var(--sklearn-color-background);
    }

    /* Toggleable label */
    #sk-container-id-1 label.sk-toggleable__label {
      cursor: pointer;
      display: block;
      width: 100%;
      margin-bottom: 0;
      padding: 0.5em;
      box-sizing: border-box;
      text-align: center;
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:before {
      /* Arrow on the left of the label */
      content: "▸";
      float: left;
      margin-right: 0.25em;
      color: var(--sklearn-color-icon);
    }

    #sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {
      color: var(--sklearn-color-text);
    }

    /* Toggleable content - dropdown */

    #sk-container-id-1 div.sk-toggleable__content {
      max-height: 0;
      max-width: 0;
      overflow: hidden;
      text-align: left;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content pre {
      margin: 0.2em;
      border-radius: 0.25em;
      color: var(--sklearn-color-text);
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-toggleable__content.fitted pre {
      /* unfitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {
      /* Expand drop-down */
      max-height: 200px;
      max-width: 100%;
      overflow: auto;
    }

    #sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {
      content: "▾";
    }

    /* Pipeline/ColumnTransformer-specific style */

    #sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator-specific style */

    /* Colorize estimator box */
    #sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    #sk-container-id-1 div.sk-label label.sk-toggleable__label,
    #sk-container-id-1 div.sk-label label {
      /* The background is the default theme color */
      color: var(--sklearn-color-text-on-default-background);
    }

    /* On hover, darken the color of the background */
    #sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    /* Label box, darken color on hover, fitted */
    #sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {
      color: var(--sklearn-color-text);
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Estimator label */

    #sk-container-id-1 div.sk-label label {
      font-family: monospace;
      font-weight: bold;
      display: inline-block;
      line-height: 1.2em;
    }

    #sk-container-id-1 div.sk-label-container {
      text-align: center;
    }

    /* Estimator-specific */
    #sk-container-id-1 div.sk-estimator {
      font-family: monospace;
      border: 1px dotted var(--sklearn-color-border-box);
      border-radius: 0.25em;
      box-sizing: border-box;
      margin-bottom: 0.5em;
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-0);
    }

    #sk-container-id-1 div.sk-estimator.fitted {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-0);
    }

    /* on hover */
    #sk-container-id-1 div.sk-estimator:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-2);
    }

    #sk-container-id-1 div.sk-estimator.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-2);
    }

    /* Specification for estimator info (e.g. "i" and "?") */

    /* Common style for "i" and "?" */

    .sk-estimator-doc-link,
    a:link.sk-estimator-doc-link,
    a:visited.sk-estimator-doc-link {
      float: right;
      font-size: smaller;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1em;
      height: 1em;
      width: 1em;
      text-decoration: none !important;
      margin-left: 1ex;
      /* unfitted */
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
      color: var(--sklearn-color-unfitted-level-1);
    }

    .sk-estimator-doc-link.fitted,
    a:link.sk-estimator-doc-link.fitted,
    a:visited.sk-estimator-doc-link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    div.sk-estimator:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover,
    div.sk-label-container:hover .sk-estimator-doc-link:hover,
    .sk-estimator-doc-link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover,
    div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,
    .sk-estimator-doc-link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    /* Span, style for the box shown on hovering the info icon */
    .sk-estimator-doc-link span {
      display: none;
      z-index: 9999;
      position: relative;
      font-weight: normal;
      right: .2ex;
      padding: .5ex;
      margin: .5ex;
      width: min-content;
      min-width: 20ex;
      max-width: 50ex;
      color: var(--sklearn-color-text);
      box-shadow: 2pt 2pt 4pt #999;
      /* unfitted */
      background: var(--sklearn-color-unfitted-level-0);
      border: .5pt solid var(--sklearn-color-unfitted-level-3);
    }

    .sk-estimator-doc-link.fitted span {
      /* fitted */
      background: var(--sklearn-color-fitted-level-0);
      border: var(--sklearn-color-fitted-level-3);
    }

    .sk-estimator-doc-link:hover span {
      display: block;
    }

    /* "?"-specific style due to the `<a>` HTML tag */

    #sk-container-id-1 a.estimator_doc_link {
      float: right;
      font-size: 1rem;
      line-height: 1em;
      font-family: monospace;
      background-color: var(--sklearn-color-background);
      border-radius: 1rem;
      height: 1rem;
      width: 1rem;
      text-decoration: none;
      /* unfitted */
      color: var(--sklearn-color-unfitted-level-1);
      border: var(--sklearn-color-unfitted-level-1) 1pt solid;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted {
      /* fitted */
      border: var(--sklearn-color-fitted-level-1) 1pt solid;
      color: var(--sklearn-color-fitted-level-1);
    }

    /* On hover */
    #sk-container-id-1 a.estimator_doc_link:hover {
      /* unfitted */
      background-color: var(--sklearn-color-unfitted-level-3);
      color: var(--sklearn-color-background);
      text-decoration: none;
    }

    #sk-container-id-1 a.estimator_doc_link.fitted:hover {
      /* fitted */
      background-color: var(--sklearn-color-fitted-level-3);
    }
    </style><div id="sk-container-id-1" class="sk-top-container"><div class="sk-text-repr-fallback"><pre>MoXGBRegressor(base_score=None, booster=None, callbacks=None,
                   colsample_bylevel=None, colsample_bynode=None,
                   colsample_bytree=None, device=None, early_stopping_rounds=None,
                   enable_categorical=False, eval_metric=None, feature_types=None,
                   gamma=None, grow_policy=None, importance_type=None,
                   interaction_constraints=None, learning_rate=None, max_bin=None,
                   max_cat_threshold=None, max_cat_to_onehot=None,
                   max_delta_step=None, max_depth=2, max_leaves=None,
                   min_child_weight=None, missing=nan, monotone_constraints=None,
                   multi_strategy=None, n_estimators=None, n_jobs=None,
                   num_parallel_tree=None, objective=&#x27;reg:squarederror&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class="sk-container" hidden><div class="sk-item"><div class="sk-estimator fitted sk-toggleable"><input class="sk-toggleable__control sk-hidden--visually" id="sk-estimator-id-1" type="checkbox" checked><label for="sk-estimator-id-1" class="sk-toggleable__label fitted sk-toggleable__label-arrow fitted">&nbsp;MoXGBRegressor<span class="sk-estimator-doc-link fitted">i<span>Fitted</span></span></label><div class="sk-toggleable__content fitted"><pre>MoXGBRegressor(base_score=None, booster=None, callbacks=None,
                   colsample_bylevel=None, colsample_bynode=None,
                   colsample_bytree=None, device=None, early_stopping_rounds=None,
                   enable_categorical=False, eval_metric=None, feature_types=None,
                   gamma=None, grow_policy=None, importance_type=None,
                   interaction_constraints=None, learning_rate=None, max_bin=None,
                   max_cat_threshold=None, max_cat_to_onehot=None,
                   max_delta_step=None, max_depth=2, max_leaves=None,
                   min_child_weight=None, missing=nan, monotone_constraints=None,
                   multi_strategy=None, n_estimators=None, n_jobs=None,
                   num_parallel_tree=None, objective=&#x27;reg:squarederror&#x27;, ...)</pre></div> </div></div></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 34-35

Get XGB predictions and combine it to original dataframe

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: Python

    data = ds.to_df()
    data["prediction"] = model.predict(ds.x)
    data






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X0</th>
          <th>X1</th>
          <th>X2</th>
          <th>X3</th>
          <th>X4</th>
          <th>X5</th>
          <th>X6</th>
          <th>X7</th>
          <th>X8</th>
          <th>X9</th>
          <th>Y</th>
          <th>prediction</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.588015</td>
          <td>0.699109</td>
          <td>0.188152</td>
          <td>0.043809</td>
          <td>0.205019</td>
          <td>0.106063</td>
          <td>0.727240</td>
          <td>0.679401</td>
          <td>0.473846</td>
          <td>0.448296</td>
          <td>13.206988</td>
          <td>12.582415</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.019107</td>
          <td>0.752598</td>
          <td>0.602449</td>
          <td>0.961778</td>
          <td>0.664369</td>
          <td>0.606630</td>
          <td>0.449151</td>
          <td>0.225354</td>
          <td>0.670174</td>
          <td>0.735767</td>
          <td>13.592973</td>
          <td>13.675001</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.257996</td>
          <td>0.095542</td>
          <td>0.960910</td>
          <td>0.251767</td>
          <td>0.282165</td>
          <td>0.768254</td>
          <td>0.797923</td>
          <td>0.544037</td>
          <td>0.382708</td>
          <td>0.381651</td>
          <td>9.029178</td>
          <td>8.205414</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.285827</td>
          <td>0.740268</td>
          <td>0.238987</td>
          <td>0.437722</td>
          <td>0.883539</td>
          <td>0.289281</td>
          <td>0.784507</td>
          <td>0.758954</td>
          <td>0.417785</td>
          <td>0.225769</td>
          <td>16.431121</td>
          <td>15.980921</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.420098</td>
          <td>0.064364</td>
          <td>0.596433</td>
          <td>0.837324</td>
          <td>0.892486</td>
          <td>0.200527</td>
          <td>0.502395</td>
          <td>0.895382</td>
          <td>0.255921</td>
          <td>0.867232</td>
          <td>13.825086</td>
          <td>13.701540</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>9995</th>
          <td>0.610214</td>
          <td>0.173863</td>
          <td>0.379870</td>
          <td>0.855732</td>
          <td>0.995710</td>
          <td>0.774907</td>
          <td>0.663980</td>
          <td>0.450129</td>
          <td>0.371868</td>
          <td>0.786980</td>
          <td>17.030929</td>
          <td>17.721428</td>
        </tr>
        <tr>
          <th>9996</th>
          <td>0.321977</td>
          <td>0.447790</td>
          <td>0.844247</td>
          <td>0.491198</td>
          <td>0.164574</td>
          <td>0.217217</td>
          <td>0.114470</td>
          <td>0.756980</td>
          <td>0.829310</td>
          <td>0.234170</td>
          <td>12.270187</td>
          <td>14.958257</td>
        </tr>
        <tr>
          <th>9997</th>
          <td>0.562901</td>
          <td>0.988444</td>
          <td>0.146303</td>
          <td>0.643783</td>
          <td>0.177257</td>
          <td>0.937573</td>
          <td>0.326172</td>
          <td>0.380283</td>
          <td>0.647091</td>
          <td>0.459508</td>
          <td>19.656600</td>
          <td>20.068596</td>
        </tr>
        <tr>
          <th>9998</th>
          <td>0.369260</td>
          <td>0.084915</td>
          <td>0.412384</td>
          <td>0.359434</td>
          <td>0.517909</td>
          <td>0.673022</td>
          <td>0.480433</td>
          <td>0.008592</td>
          <td>0.962570</td>
          <td>0.060237</td>
          <td>7.314724</td>
          <td>7.738867</td>
        </tr>
        <tr>
          <th>9999</th>
          <td>0.933632</td>
          <td>0.641684</td>
          <td>0.083692</td>
          <td>0.782306</td>
          <td>0.085755</td>
          <td>0.667596</td>
          <td>0.291867</td>
          <td>0.219102</td>
          <td>0.037242</td>
          <td>0.337953</td>
          <td>21.116355</td>
          <td>20.557680</td>
        </tr>
      </tbody>
    </table>
    <p>10000 rows × 12 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 40-41

Next, we will use this combined data to do model validation

.. GENERATED FROM PYTHON SOURCE LINES 41-49

.. code-block:: Python

    new_ds = DataSet(name="scored-test-demo")
    new_ds.load_dataframe(data)
    new_ds.set_train_idx(train_idx=np.array(ds.train_idx))
    new_ds.set_test_idx(test_idx=np.array(ds.test_idx))
    new_ds.set_target(feature="Y")
    new_ds.set_prediction(feature="prediction")
    new_ds.register(override=True)








.. GENERATED FROM PYTHON SOURCE LINES 50-51

Reload the model (optional)

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: Python

    reload_ds = DataSet(name="scored-test-demo")
    reload_ds.load_registered_data(name="scored-test-demo")








.. GENERATED FROM PYTHON SOURCE LINES 55-56

Run tests without the model object, note that the robustness test is not available for scored model

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: Python

    model = MoScoredRegressor(dataset=new_ds)
    ts = TestSuite(ds, model)








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Run accuracy test without the model object

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: Python

    results = ts.diagnose_accuracy_table()
    results.table






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>MSE</th>
          <th>MAE</th>
          <th>R2</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>train</th>
          <td>0.403903</td>
          <td>0.506589</td>
          <td>0.982881</td>
        </tr>
        <tr>
          <th>test</th>
          <td>0.495706</td>
          <td>0.555849</td>
          <td>0.979072</td>
        </tr>
        <tr>
          <th>gap</th>
          <td>0.091803</td>
          <td>0.049260</td>
          <td>-0.003809</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 65-66

Run residual analysis test without the model object

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: Python

    results = ts.diagnose_residual_analysis(features="X1")
    results.table






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>X1</th>
          <th>Residual</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.635617</td>
          <td>-0.050614</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.875602</td>
          <td>-0.520595</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.913825</td>
          <td>-0.725612</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.933827</td>
          <td>0.393764</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.569646</td>
          <td>-0.703372</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>1995</th>
          <td>0.042887</td>
          <td>-0.135089</td>
        </tr>
        <tr>
          <th>1996</th>
          <td>0.542488</td>
          <td>-0.347522</td>
        </tr>
        <tr>
          <th>1997</th>
          <td>0.687846</td>
          <td>-1.010307</td>
        </tr>
        <tr>
          <th>1998</th>
          <td>0.447790</td>
          <td>-2.688070</td>
        </tr>
        <tr>
          <th>1999</th>
          <td>0.641684</td>
          <td>0.558675</td>
        </tr>
      </tbody>
    </table>
    <p>2000 rows × 2 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 70-71

Run reliability test without the model object

.. GENERATED FROM PYTHON SOURCE LINES 71-74

.. code-block:: Python

    results = ts.diagnose_reliability()
    results.table






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Avg.Width</th>
          <th>Avg.Coverage</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>2.206972</td>
          <td>0.881</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 75-76

Run resilience test without the model object

.. GENERATED FROM PYTHON SOURCE LINES 76-79

.. code-block:: Python

    results = ts.diagnose_resilience()
    results.table






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>MSE</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0.1</th>
          <td>2.300246</td>
        </tr>
        <tr>
          <th>0.2</th>
          <td>1.656052</td>
        </tr>
        <tr>
          <th>0.3</th>
          <td>1.312533</td>
        </tr>
        <tr>
          <th>0.4</th>
          <td>1.086981</td>
        </tr>
        <tr>
          <th>0.5</th>
          <td>0.923880</td>
        </tr>
        <tr>
          <th>0.6</th>
          <td>0.798215</td>
        </tr>
        <tr>
          <th>0.7</th>
          <td>0.698043</td>
        </tr>
        <tr>
          <th>0.8</th>
          <td>0.616992</td>
        </tr>
        <tr>
          <th>0.9</th>
          <td>0.550503</td>
        </tr>
        <tr>
          <th>1.0</th>
          <td>0.495706</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 80-81

Run slicing accuracy test without the model object

.. GENERATED FROM PYTHON SOURCE LINES 81-84

.. code-block:: Python

    results = ts.diagnose_slicing_accuracy(features="X1", dataset="main", metric="MAE", threshold=0)
    results.table






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Feature</th>
          <th>Segment</th>
          <th>Size</th>
          <th>MAE</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>9</th>
          <td>X1</td>
          <td>[0.90, 1.00]</td>
          <td>996</td>
          <td>0.693453</td>
        </tr>
        <tr>
          <th>2</th>
          <td>X1</td>
          <td>[0.20, 0.30)</td>
          <td>1015</td>
          <td>0.591176</td>
        </tr>
        <tr>
          <th>3</th>
          <td>X1</td>
          <td>[0.30, 0.40)</td>
          <td>1003</td>
          <td>0.524754</td>
        </tr>
        <tr>
          <th>8</th>
          <td>X1</td>
          <td>[0.80, 0.90)</td>
          <td>926</td>
          <td>0.506720</td>
        </tr>
        <tr>
          <th>1</th>
          <td>X1</td>
          <td>[0.10, 0.20)</td>
          <td>1019</td>
          <td>0.503903</td>
        </tr>
        <tr>
          <th>0</th>
          <td>X1</td>
          <td>[0.00, 0.10)</td>
          <td>989</td>
          <td>0.503275</td>
        </tr>
        <tr>
          <th>5</th>
          <td>X1</td>
          <td>[0.50, 0.60)</td>
          <td>1011</td>
          <td>0.490974</td>
        </tr>
        <tr>
          <th>4</th>
          <td>X1</td>
          <td>[0.40, 0.50)</td>
          <td>976</td>
          <td>0.486084</td>
        </tr>
        <tr>
          <th>7</th>
          <td>X1</td>
          <td>[0.70, 0.80)</td>
          <td>1016</td>
          <td>0.447887</td>
        </tr>
        <tr>
          <th>6</th>
          <td>X1</td>
          <td>[0.60, 0.70)</td>
          <td>1049</td>
          <td>0.420473</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 85-86

Run slicing overfit test without the model object

.. GENERATED FROM PYTHON SOURCE LINES 86-88

.. code-block:: Python

    results = ts.diagnose_slicing_overfit(features="X1", train_dataset="train", test_dataset="test", metric="MAE")
    results.table





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>Feature</th>
          <th>Segment</th>
          <th>train-Size</th>
          <th>train-MAE</th>
          <th>test-Size</th>
          <th>test-MAE</th>
          <th>gap</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>9</th>
          <td>X1</td>
          <td>[0.90, 1.00]</td>
          <td>799</td>
          <td>0.676694</td>
          <td>198</td>
          <td>0.761352</td>
          <td>0.084658</td>
        </tr>
        <tr>
          <th>4</th>
          <td>X1</td>
          <td>[0.40, 0.50)</td>
          <td>790</td>
          <td>0.472435</td>
          <td>187</td>
          <td>0.545458</td>
          <td>0.073023</td>
        </tr>
        <tr>
          <th>8</th>
          <td>X1</td>
          <td>[0.80, 0.90)</td>
          <td>755</td>
          <td>0.493668</td>
          <td>171</td>
          <td>0.560170</td>
          <td>0.066502</td>
        </tr>
        <tr>
          <th>1</th>
          <td>X1</td>
          <td>[0.10, 0.20)</td>
          <td>832</td>
          <td>0.491540</td>
          <td>185</td>
          <td>0.556751</td>
          <td>0.065211</td>
        </tr>
        <tr>
          <th>2</th>
          <td>X1</td>
          <td>[0.20, 0.30)</td>
          <td>809</td>
          <td>0.577426</td>
          <td>207</td>
          <td>0.640564</td>
          <td>0.063138</td>
        </tr>
        <tr>
          <th>0</th>
          <td>X1</td>
          <td>[0.00, 0.10)</td>
          <td>788</td>
          <td>0.492537</td>
          <td>201</td>
          <td>0.545372</td>
          <td>0.052835</td>
        </tr>
        <tr>
          <th>6</th>
          <td>X1</td>
          <td>[0.60, 0.70)</td>
          <td>851</td>
          <td>0.411553</td>
          <td>198</td>
          <td>0.459183</td>
          <td>0.047630</td>
        </tr>
        <tr>
          <th>7</th>
          <td>X1</td>
          <td>[0.70, 0.80)</td>
          <td>810</td>
          <td>0.440820</td>
          <td>206</td>
          <td>0.475803</td>
          <td>0.034983</td>
        </tr>
        <tr>
          <th>5</th>
          <td>X1</td>
          <td>[0.50, 0.60)</td>
          <td>785</td>
          <td>0.489518</td>
          <td>226</td>
          <td>0.496097</td>
          <td>0.006579</td>
        </tr>
        <tr>
          <th>3</th>
          <td>X1</td>
          <td>[0.30, 0.40)</td>
          <td>781</td>
          <td>0.525359</td>
          <td>221</td>
          <td>0.528931</td>
          <td>0.003572</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.774 seconds)


.. _sphx_glr_download__source_auto_galleries_data_plot_6_advanced_prediction.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_6_advanced_prediction.ipynb <plot_6_advanced_prediction.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_6_advanced_prediction.py <plot_6_advanced_prediction.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_6_advanced_prediction.zip <plot_6_advanced_prediction.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
